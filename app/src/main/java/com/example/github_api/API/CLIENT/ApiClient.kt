package com.example.github_api.API.CLIENT

import android.util.Log
import com.example.github_api.API.SERVICE.GithubInterface
import com.example.github_api.BuildConfig
import okhttp3.OkHttpClient
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

/**
 * Singleton object that handles the creation of the Retrofit instance and the GithubInterface service.
 */
object ApiClient
{
    // Secret key for the Github API, retrieved from the BuildConfig generated by Gradle.
    val mySuperScretKey = BuildConfig.KEY

    // Base URL for the Github API, retrieved from the BuildConfig generated by Gradle.
    val BASE_URL = BuildConfig.BASE_URL

    // OkHttpClient instance with custom settings.
    private val okHttpClient = OkHttpClient.Builder()
        // Set the read timeout to 30 seconds.
        .readTimeout(30, TimeUnit.SECONDS)
        // Set the write timeout to 15 seconds.
        .writeTimeout(15, TimeUnit.SECONDS)
        // Add an interceptor to the OkHttpClient.
        // This interceptor adds the Authorization header to every request.
        .addInterceptor { chain ->
            val request = chain.request().newBuilder()
                .addHeader("Authorization", mySuperScretKey)
                .build()
            chain.proceed(request)
        }
        .build()

    // Retrofit instance with custom settings.
    private val retrofit = Retrofit.Builder()
        // Set the base URL for the API.
        .baseUrl(BASE_URL)
        // Add a converter factory for handling the API responses.
        .addConverterFactory(GsonConverterFactory.create())
        // Set the client for the Retrofit instance.
        .client(okHttpClient)
        .build()

    // GithubInterface service instance, created by the Retrofit instance.
    val githubservice = retrofit.create<GithubInterface>(GithubInterface::class.java)
}